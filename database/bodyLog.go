// Package database contains all database related methods
// Author : readyGo "JitenP@Outlook.Com"
// This code is generated by readyGo. You are free to make amendments as and where required
package database

import (
	"github.com/jitenpalaparthi/bodylog/helper"
	"github.com/jitenpalaparthi/bodylog/models"
)

// CovidDataDB is to maintain database related methods
type BodyLogDB struct {
	DB *Database
}

// CreateCovidData is to insert a record in to the database.
func (c *BodyLogDB) CreateBodyLog(bodyLog *models.BodyLog) (result string, err error) {
	data, err := helper.ToMap(bodyLog, "bson", "_id,omitempty")
	if err != nil {
		return "", err
	}
	result, err = c.DB.InsertRecord("bodyLog", data)
	if err != nil {
		return "", err
	}
	return result, nil
}

// // UpdateCovidDataByID is to update a record in the database.The first param is to identify the record and the second is the list of the fields to update
// func (c *CovidDataDB) UpdateCovidDataByID(id string, data map[string]interface{}) (result string, err error) {
// 	result, err = c.DB.UpdateRecordByID("coviddatas", id, data)
// 	if err != nil {
// 		return "", err
// 	}
// 	return result, nil
// }

// // DeleteCovidDataByID is to hard delete a record from the database provided by id
// func (c *CovidDataDB) DeleteCovidDataByID(id string) (result string, err error) {
// 	result, err = c.DB.DeleteRecordByID("coviddatas", id)
// 	if err != nil {
// 		return "", err
// 	}
// 	return result, nil
// }

// // GetCovidDataByID is to fetch a record from database provided by id
// func (c *CovidDataDB) GetCovidDataByID(id string) (*models.CovidData, error) {
// 	coviddata := &models.CovidData{}
// 	mapData, err := c.DB.FindRecordByID("coviddatas", id)
// 	if err != nil {
// 		return nil, err
// 	}
// 	if err := mapstructure.Decode(mapData, &coviddata); err != nil {
// 		return nil, err
// 	}
// 	return coviddata, nil
// }

// // GetAllCovidDatas fetches all records from a table. skip and limit params are used to fetch specific number of records. selector is a additional param to fetch based on
// func (c *CovidDataDB) GetAllCovidDatas(skip int64, limit int64, selector interface{}) ([]models.CovidData, error) {
// 	if _, ok := selector.(map[string]interface{}); !ok {
// 		return nil, errors.New("invalid input type")
// 	}
// 	var result []models.CovidData
// 	colleection := c.DB.Client.(*mongo.Client).Database(c.DB.Name).Collection("coviddatas")
// 	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
// 	findOptions := options.Find()
// 	findOptions.SetLimit(limit).SetSkip(skip)
// 	cur, err := colleection.Find(ctx, selector, findOptions)
// 	if err != nil {
// 		return nil, err
// 	}
// 	result = make([]models.CovidData, 0)
// 	defer cur.Close(ctx)
// 	for cur.Next(ctx) {
// 		iresult := models.CovidData{}
// 		err := cur.Decode(&iresult)
// 		if err != nil {
// 			return nil, err
// 		}
// 		result = append(result, iresult)
// 		// do something with result....
// 	}
// 	if err := cur.Err(); err != nil {
// 		return nil, err
// 	}
// 	return result, nil
// }

// // GetAllCovidDatasBy fetches all records from a table. skip and limit params are used to fetch specific number of records.key and value are addition params to fetch based on a key with a value
// func (c *CovidDataDB) GetAllCovidDatasBy(key string, value interface{}, skip int64, limit int64) ([]models.CovidData, error) {
// 	if key == "" {
// 		return nil, errors.New("invalid input type")
// 	}

// 	if value == nil {
// 		return nil, errors.New("invalid input type")
// 	}

// 	selector := make(map[string]interface{})

// 	var result []models.CovidData
// 	colleection := c.DB.Client.(*mongo.Client).Database(c.DB.Name).Collection("coviddatas")
// 	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
// 	findOptions := options.Find()
// 	findOptions.SetLimit(limit).SetSkip(skip)

// 	selector[key] = value

// 	cur, err := colleection.Find(ctx, selector, findOptions)
// 	if err != nil {
// 		return nil, err
// 	}
// 	result = make([]models.CovidData, 0)
// 	defer cur.Close(ctx)
// 	for cur.Next(ctx) {
// 		iresult := models.CovidData{}
// 		err := cur.Decode(&iresult)
// 		if err != nil {
// 			return nil, err
// 		}
// 		result = append(result, iresult)
// 		// do something with result....
// 	}
// 	if err := cur.Err(); err != nil {
// 		return nil, err
// 	}

// 	return result, nil
// }
