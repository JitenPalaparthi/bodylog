// Author : readyGo "JitenP@Outlook.Com"
// This code is generated by readyGo. You are free to make amendments as and where required
package main

import (
	_ "context"
	"os"

	"github.com/jitenpalaparthi/bodylog/database"
	"github.com/jitenpalaparthi/bodylog/handlers"
	"github.com/jitenpalaparthi/bodylog/messaging"

	"github.com/gin-gonic/contrib/jwt"
	"github.com/gin-gonic/gin"
	"github.com/golang/glog"
)

var (
	// DBConnection is to store database connection information
	DBConnection = "mongodb://localhost:27017"
	// DBName is to store database name
	DBName = "bodyLog"
	//MessageBrokerConnection is to connect to the message broker
	MessageBrokerConnection = "nats://localhost:4222"

	mysupersecretpassword = "TheAimIsToUseThisJWT"
)

func main() {
	glog.Info("Application covidAnalysis has started")
	if os.Getenv("DB_CONNECTION") != "" {
		DBConnection = os.Getenv("DB_CONNECTION")
	}
	if os.Getenv("DB_NAME") != "" {
		DBName = os.Getenv("DB_NAME")
	}
	if os.Getenv("MB_CONNECTION") != "" {
		MessageBrokerConnection = os.Getenv("MB_CONNECTION")
	}
	session, err := database.GetConnection(DBConnection, DBName)
	//defer session.Disconnect(context.TODO())

	if err != nil {
		glog.Fatal("mongo database is not connected", err)
	}
	message, err := messaging.GetConnection(MessageBrokerConnection)
	if err != nil {
		glog.Fatal("message broker is not connected", err)
	}
	message.Init()
	defer message.Disconnect()

	gin.ForceConsoleColor()

	router := gin.Default()
	router.Use(CORSMiddleware())
	router.GET("/ping", func(c *gin.Context) {
		c.String(200, "pong")
	})

	u := new(handlers.User)
	u.IUser = &database.UserDB{DB: session}

	public := router.Group("/v1/public/user")
	{
		public.POST("/signin", u.SignIn())
		public.POST("/mobile/signin", u.MobileSignin())
		public.POST("/register", u.Register())
		public.POST("/resetPassword", u.ResetPassword())
	}

	userGroup := router.Group("/v1/user")
	{
		userGroup.Use(jwt.Auth(mysupersecretpassword))
		userGroup.GET("/get/:email", u.GetUserBy())
		userGroup.GET("/getAll/:skip/:limit", u.GetUsers())
		userGroup.PUT("/update/:id", u.UpdateById())
		//userGroup.GET("/summary", u.GetSummary())

	}

	bodyLog := new(handlers.BodyLog)
	bodyLog.IBodyLog = &database.BodyLogDB{DB: session}
	bodyLog.Messaging = message

	coviddataGroup := router.Group("/v1/bodyLog")
	{
		coviddataGroup.Use(jwt.Auth(mysupersecretpassword))
		coviddataGroup.POST("/create", bodyLog.CreateBodyLog())
		// coviddataGroup.DELETE("/delete/:id", coviddata.DeleteCovidDataByID())
		// coviddataGroup.PUT("/update/:id", coviddata.UpdateCovidDataByID())
		// coviddataGroup.GET("/get/:id", coviddata.GetCovidDataByID())
		// coviddataGroup.GET("/getAll/:skip/:limit", coviddata.GetAllCovidDatas())
		// coviddataGroup.GET("/getAllBy/:skip/:limit", coviddata.GetAllCovidDatasBy())
	}

	router.Run(":50061")
}

//CORSMiddleware a simple middle ware
func CORSMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		c.Writer.Header().Set("Access-Control-Max-Age", "86400")
		//  "Access-Control-Allow-Credentials": true, // Required for cookies, authorization headers with HTTPS

		c.Writer.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE, UPDATE")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "Access-Control-Allow-Origin, Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		c.Writer.Header().Set("Access-Control-Expose-Headers", "Content-Length")
		c.Writer.Header().Set("Access-Control-Allow-Credentials", "true")
		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(200)
		} else {
			c.Next()
		}
	}
}
